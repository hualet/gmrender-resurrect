/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DBUS_DMOVIE_H__
#define __DBUS_DMOVIE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.deepin.DeepinMovie */

#define DBUS_DMOVIE_TYPE_ (dbus_dmovie__get_type ())
#define DBUS_DMOVIE_(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_DMOVIE_TYPE_, DBusDmovie))
#define DBUS_DMOVIE_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_DMOVIE_TYPE_))
#define DBUS_DMOVIE__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_DMOVIE_TYPE_, DBusDmovieIface))

struct _DBusDmovie;
typedef struct _DBusDmovie DBusDmovie;
typedef struct _DBusDmovieIface DBusDmovieIface;

struct _DBusDmovieIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_pause) (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_play) (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_play_paths) (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_pathList);

  gboolean (*handle_seek) (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_position);

  gboolean (*handle_set_uri) (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri);

  gboolean (*handle_stop) (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation);

  gint64  (*get_duration) (DBusDmovie *object);

  gboolean  (*get_mute) (DBusDmovie *object);

  gint64  (*get_position) (DBusDmovie *object);

  gdouble  (*get_volume) (DBusDmovie *object);

};

GType dbus_dmovie__get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_dmovie__interface_info (void);
guint dbus_dmovie__override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_dmovie__complete_play_paths (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation);

void dbus_dmovie__complete_play (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation);

void dbus_dmovie__complete_pause (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation);

void dbus_dmovie__complete_stop (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation);

void dbus_dmovie__complete_set_uri (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation);

void dbus_dmovie__complete_seek (
    DBusDmovie *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void dbus_dmovie__call_play_paths (
    DBusDmovie *proxy,
    const gchar *arg_pathList,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dmovie__call_play_paths_finish (
    DBusDmovie *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dmovie__call_play_paths_sync (
    DBusDmovie *proxy,
    const gchar *arg_pathList,
    GCancellable *cancellable,
    GError **error);

void dbus_dmovie__call_play (
    DBusDmovie *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dmovie__call_play_finish (
    DBusDmovie *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dmovie__call_play_sync (
    DBusDmovie *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_dmovie__call_pause (
    DBusDmovie *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dmovie__call_pause_finish (
    DBusDmovie *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dmovie__call_pause_sync (
    DBusDmovie *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_dmovie__call_stop (
    DBusDmovie *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dmovie__call_stop_finish (
    DBusDmovie *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dmovie__call_stop_sync (
    DBusDmovie *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_dmovie__call_set_uri (
    DBusDmovie *proxy,
    const gchar *arg_uri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dmovie__call_set_uri_finish (
    DBusDmovie *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dmovie__call_set_uri_sync (
    DBusDmovie *proxy,
    const gchar *arg_uri,
    GCancellable *cancellable,
    GError **error);

void dbus_dmovie__call_seek (
    DBusDmovie *proxy,
    gint64 arg_position,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_dmovie__call_seek_finish (
    DBusDmovie *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_dmovie__call_seek_sync (
    DBusDmovie *proxy,
    gint64 arg_position,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gdouble dbus_dmovie__get_volume (DBusDmovie *object);
void dbus_dmovie__set_volume (DBusDmovie *object, gdouble value);

gboolean dbus_dmovie__get_mute (DBusDmovie *object);
void dbus_dmovie__set_mute (DBusDmovie *object, gboolean value);

gint64 dbus_dmovie__get_duration (DBusDmovie *object);
void dbus_dmovie__set_duration (DBusDmovie *object, gint64 value);

gint64 dbus_dmovie__get_position (DBusDmovie *object);
void dbus_dmovie__set_position (DBusDmovie *object, gint64 value);


/* ---- */

#define DBUS_DMOVIE_TYPE__PROXY (dbus_dmovie__proxy_get_type ())
#define DBUS_DMOVIE__PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_DMOVIE_TYPE__PROXY, DBusDmovieProxy))
#define DBUS_DMOVIE__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_DMOVIE_TYPE__PROXY, DBusDmovieProxyClass))
#define DBUS_DMOVIE__PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_DMOVIE_TYPE__PROXY, DBusDmovieProxyClass))
#define DBUS_DMOVIE_IS__PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_DMOVIE_TYPE__PROXY))
#define DBUS_DMOVIE_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_DMOVIE_TYPE__PROXY))

typedef struct _DBusDmovieProxy DBusDmovieProxy;
typedef struct _DBusDmovieProxyClass DBusDmovieProxyClass;
typedef struct _DBusDmovieProxyPrivate DBusDmovieProxyPrivate;

struct _DBusDmovieProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DBusDmovieProxyPrivate *priv;
};

struct _DBusDmovieProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_dmovie__proxy_get_type (void) G_GNUC_CONST;

void dbus_dmovie__proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBusDmovie *dbus_dmovie__proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DBusDmovie *dbus_dmovie__proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_dmovie__proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBusDmovie *dbus_dmovie__proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DBusDmovie *dbus_dmovie__proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_DMOVIE_TYPE__SKELETON (dbus_dmovie__skeleton_get_type ())
#define DBUS_DMOVIE__SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_DMOVIE_TYPE__SKELETON, DBusDmovieSkeleton))
#define DBUS_DMOVIE__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_DMOVIE_TYPE__SKELETON, DBusDmovieSkeletonClass))
#define DBUS_DMOVIE__SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_DMOVIE_TYPE__SKELETON, DBusDmovieSkeletonClass))
#define DBUS_DMOVIE_IS__SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_DMOVIE_TYPE__SKELETON))
#define DBUS_DMOVIE_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_DMOVIE_TYPE__SKELETON))

typedef struct _DBusDmovieSkeleton DBusDmovieSkeleton;
typedef struct _DBusDmovieSkeletonClass DBusDmovieSkeletonClass;
typedef struct _DBusDmovieSkeletonPrivate DBusDmovieSkeletonPrivate;

struct _DBusDmovieSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DBusDmovieSkeletonPrivate *priv;
};

struct _DBusDmovieSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_dmovie__skeleton_get_type (void) G_GNUC_CONST;

DBusDmovie *dbus_dmovie__skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_DMOVIE_H__ */
